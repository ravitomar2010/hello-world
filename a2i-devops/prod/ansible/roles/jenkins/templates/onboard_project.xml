<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>REPO_TO_ADD</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This job can create the required Dockerfile, Jenkinsfile etc required for the CI/CD process. It creates a Jenkins Job also</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.9"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPO_TO_ADD</name>
          <description></description>
          <defaultValue>{{ onboard_job_repo }}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_TO_CONFIGURE</name>
          <description>GIT branch which would be checked out for creating the initial configurations</description>
          <defaultValue>{{ onboard_job_configure_branch }}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>@Library(&apos;{{ shared_library_name }}&apos;) _
    node {
        node(&apos;{{ shared_library_default_version }}&apos;) {
        stage(&apos;Cleaning Up Workspace&apos;){
            utility.cleanWorkspace()   
        }
        }


        stage(&apos;Checkout repository&apos;) {
            node(&apos;{{ shared_library_default_version }}&apos;) {
            /**
            *Initializing Name Configuration for Job
            **/
            env.ORG = &quot;${params.REPO_TO_ADD}&quot;.split(&apos;/&apos;)[3]
            env.APP_NAME = &quot;${params.REPO_TO_ADD}&quot;.split(&apos;/&apos;)[4].split(&apos;\\.&apos;)[0]
            if(&quot;${params.REPO_TO_ADD}&quot;.split(&apos;/&apos;)[2].contains(&apos;@&apos;)){
                env.REPO_URL = &quot;${params.REPO_TO_ADD}&quot;.split(&apos;/&apos;)[2].split(&apos;@&apos;)[1]
            }
            else{
                env.REPO_URL = &quot;${params.REPO_TO_ADD}&quot;.split(&apos;/&apos;)[2]
            }

            env.DOCKER_REGISTRY_ORG = utility.getECRName()
            env.GIT_CRED_ID = &apos;BitBucketAdmin&apos;
            env.JKS_CRED_ID = &apos;JKS_CRED_ID&apos;
            echo &quot;ORG: ${ORG}&quot;
            echo &quot;REPO_URL: ${REPO_URL}&quot;
            echo &quot;REPO_TO_ADD: ${params.REPO_TO_ADD}&quot;
            echo &quot;APP_NAME: ${APP_NAME}&quot;
            //utility.cloneRepo()
            checkout([$class: &apos;GitSCM&apos;, branches: [[name: &quot;${BRANCH_TO_CONFIGURE}&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &apos;SubmoduleOption&apos;, disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: &apos;&apos;, trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;${GIT_CRED_ID}&quot;, url: &quot;https://${REPO_URL}/${ORG}/${APP_NAME}&quot;]]])
        }
        }
        
        stage(&apos;Prepare workspace&apos;) {
            node(&apos;{{ shared_library_default_version }}&apos;) {
            prepareFiles.create()
            sh &quot;&quot;&quot;
              ls -ltr
            &quot;&quot;&quot;
        }
        }

        stage(&apos;Create ECR&apos;) {
            node(&apos;{{ shared_library_default_version }}&apos;) {
            utility.createDockerRegistry(&quot;${ORG}/${APP_NAME}&quot;)
        }
        }
        
        stage(&apos;Create Jenkinsfile and Dockerfile&apos;){
            node(&apos;{{ shared_library_default_version }}&apos;) {
            //utility.createDockerfile()
            utility.createJenkinsfile()
            }
        }
        stage(&apos;Commit the files to repo&apos;) {
            node(&apos;{{ shared_library_default_version }}&apos;) {
            withCredentials([usernamePassword(credentialsId: &quot;${env.GIT_CRED_ID}&quot;, passwordVariable: &apos;GIT_PASSWORD&apos;, usernameVariable: &apos;GIT_USERNAME&apos;)]) {
                sh &quot;&quot;&quot;
                    git checkout ${BRANCH_TO_CONFIGURE}
                    git config --global credential.helper store
                    git config --global user.email \&quot;admin.hyke@axiomtelecom.com\&quot;
                    git config --global user.name \&quot;Hyke Admin\&quot;
                    git add . &amp;&amp; git commit -a -m \&quot;Added Jenkinsfile\&quot; || :
                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@bitbucket.org/\${ORG}/\${APP_NAME} ${BRANCH_TO_CONFIGURE}
                &quot;&quot;&quot;
            }
            }
        }

        stage(&apos;Create a job in Jenkins&apos;) {
            node(&apos;{{ shared_library_default_version }}&apos;) {
                withCredentials([usernamePassword(credentialsId: &quot;${env.JKS_CRED_ID}&quot;, passwordVariable: &apos;JKS_PASSWORD&apos;, usernameVariable: &apos;JKS_USERNAME&apos;)]) {
                    sh &quot;&quot;&quot;
                        sed -i &apos;s/replace_the_repository/${APP_NAME}/g&apos; template.xml 
                        java -jar ~/jenkins-cli.jar -s http://localhost:8080 -auth ${JKS_USERNAME}:${JKS_PASSWORD} create-job axiomtelecom/${APP_NAME} &lt; template.xml
                        sleep 20
                        echo &quot;Follow below URL: http://jenkins.hyke.tech/job/axiomtelecom/job/${APP_NAME}/&quot;
                    &quot;&quot;&quot;
                }
            }
        }
   }
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>